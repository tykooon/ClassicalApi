@using ClassicalApi.Web.Client.Models
@using ClassicalApi.Web.Components.Account
@using ClassicalApi.Web.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@inject DialogService dialogService
@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@inject IUserStore<ApplicationUser> userStore
@inject IEmailSender<ApplicationUser> emailSender

@* <StatusMessage Message="@Message" /> *@
<EditForm Model="registerInfo" asp-route-returnUrl="/" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <h3>Create a new account.</h3>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="registerInfo.FirstName" class="form-control" aria-required="true" placeholder="First Name" />
        <label for="first-name">First Name</label>
        <ValidationMessage For="() => registerInfo.FirstName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="registerInfo.LastName" class="form-control" aria-required="true" placeholder="Last Name" />
        <label for="last-name">Last Name</label>
        <ValidationMessage For="() => registerInfo.LastName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText @bind-Value="registerInfo.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email">Email</label>
        <ValidationMessage For="() => registerInfo.Email" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="registerInfo.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="password">Password</label>
        <ValidationMessage For="() => registerInfo.Password" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="registerInfo.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="confirm-password">Confirm Password</label>
        <ValidationMessage For="() => registerInfo.ConfirmPassword" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
</EditForm>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private RegisterModel registerInfo { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private IEnumerable<IdentityError>? identityErrors;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await userStore.SetUserNameAsync(user, registerInfo.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, registerInfo.Email, CancellationToken.None);
        var result = await userManager.CreateAsync(user, registerInfo.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var userId = await userManager.GetUserIdAsync(user);
        var code = await userManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = "/" });

        await emailSender.SendConfirmationLinkAsync(user, registerInfo.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (!userManager.Options.SignIn.RequireConfirmedAccount)
        {
            await signInManager.SignInAsync(user, isPersistent: false);
        }

        dialogService.Close(true);
        NavigationManager.NavigateTo("/");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!userManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)userStore;
    }
}
