@page "/user/login"

@using ClassicalApi.Web.Client.Models
@using BlazorIdentity.Client
@using ClassicalApi.Web.Client.Services
@using ClassicalApi.Web.Components.Account
@using ClassicalApi.Web.Components.Account.Pages
@using ClassicalApi.Web.Components.Account.Shared
@using ClassicalApi.Web.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using System.Security.Claims
@inject NotificationService notificationService
@inject DialogService dialogService
@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager navigationManager
@inject IdentityRedirectManager redirectManager
@inject IHttpClientFactory httpClientFactory
@inject IAuthenticateService authService


@* @rendermode InteractiveServer *@

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(navigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private HttpClient httpClient = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("http://localhost:5100/account/");

        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if (string.IsNullOrEmpty(ReturnUrl))
        {
            ReturnUrl = navigationManager.Uri;
        }

        var loginResult = await authService.LoginAsync(Input);

        if (loginResult.IsSucceeded)
        {
            dialogService.Close(true);
            StateHasChanged();
        }

        errorMessage = loginResult.Errors.ToString();

    }
}