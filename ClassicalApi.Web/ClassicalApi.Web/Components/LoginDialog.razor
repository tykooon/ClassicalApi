@using ClassicalApi.Web.Components.Account
@using ClassicalApi.Web.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject DialogService dialogService
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<RadzenCard class="rz-my-4 rz-mx-auto rz-p-4 rz-p-md-6" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues") >
        <RadzenLogin AllowRegister="true" AllowResetPassword="true" Username=@userName Password=@password
                     AllowRememberMe="true" RememberMe="@rememberMe" 
                     Login=@(args => OnLogin(args, "Login with default values"))
                     ResetPassword=@(args => OnResetPassword(args, "Login with default values"))
                     Register=@(args => OnRegister("Login with default values")) />
    </RadzenTemplateForm>
</RadzenCard>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    string userName = "admin";
    string password = "admin";
    bool rememberMe = true;

    async Task OnLogin(LoginArgs args, string name)
    {
        var result = await SignInManager.PasswordSignInAsync(userName, password, rememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            dialogService.Close(true);
        }
        // else if (result.RequiresTwoFactor)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/LoginWith2fa",
        //         new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        // }
        // else if (result.IsLockedOut)
        // {
        //     Logger.LogWarning("User account locked out.");
        //     RedirectManager.RedirectTo("Account/Lockout");
        // }
        else
        {
            Console.WriteLine("Error: Invalid login attempt.");
            dialogService.Close(false);
        }
    }


    async Task OnRegister(string name)
    {
        dialogService.Close(true);
        var title = "Register";
        var viewed = await dialogService.OpenAsync<RegisterDialog>(title,
               new Dictionary<string, object>() { },
               new DialogOptions() { Width = "480px", Height = "720px", Resizable = false, Draggable = true, CloseDialogOnEsc = true });

    }

    void OnResetPassword(string value, string name)
    {
        dialogService.Close(true);
    }

    protected override async Task OnInitializedAsync()
    {
        var flag = HttpContext?.Request?.Method;
        if (HttpMethods.IsGet(flag))
    {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }
}
