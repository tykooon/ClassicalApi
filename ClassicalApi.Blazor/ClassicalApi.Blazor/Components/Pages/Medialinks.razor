@page "/medialinks/{ComposerId:int}"
@using ClassicalApi.Blazor.Authentication
@using ClassicalApi.Blazor.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = "Regular")]

@inject IComposerService composerService
@inject NavigationManager navManager
@inject DialogService dialogService
@inject ICurrentUserService currentUserService
@inject TooltipService tooltipService

<PageTitle>Media Links</PageTitle>

<div class="container m-3">
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" class="mb-4">
        <img src="@Portrait" style="max-width:120px; border-radius:50%;margin-bottom:6px" />
        <h2 style="margin:0 2rem 0 1rem;">@Composer.FirstName @Composer.LastName</h2>
    </RadzenRow>
    <RadzenRow JustifyContent="JustifyContent.Start" class="mb-4">
        <h3 style="margin:0 2rem 0 1rem;">Media Links:</h3>
        <AuthorizeView Policy="Admin">
            <MediaLinkAddButton ComposerId="@ComposerId" />
        </AuthorizeView>
    </RadzenRow>

    <div style="width:fit-content">
        <QuickGrid Items="LinkList.AsQueryable()" Pagination="pagination">
            <PropertyColumn Property="c => c.Title" Title="Title" Sortable="true" />
            <TemplateColumn>
                @if (userFavorites.Contains(context.Id))
                {
                    <RadzenButton Variant="Variant.Text" Icon="favorite" ButtonStyle="ButtonStyle.Danger"
                        MouseEnter=@((e) => tooltipService.Open(e, "Remove from Favorites")) 
                        Click=@(async () => await DeleteFromFavorite(context.Id)) Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-6" />
                }
                else
                {
                    <RadzenButton Variant="Variant.Text" Icon="favorite_border" ButtonStyle="ButtonStyle.Secondary"
                                  MouseEnter=@((e) => tooltipService.Open(e, "Add to Favorites"))
                                  Click=@(async () => await AddToFavorite(context.Id)) Size="ButtonSize.Medium" class="rz-border-radius-10 rz-shadow-6" />

                }
            </TemplateColumn>
            <TemplateColumn>
                <a  class="btn btn-primary" href="@context.Url" target="_blank">Open</a>
            </TemplateColumn>
            @if (IsAdmin)
            {
                <TemplateColumn>
                    <RadzenButton Icon="delete" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await ConfirmDelete(context.Title, context.Id))" />
                </TemplateColumn>
            }
        </QuickGrid>
        <Paginator State="pagination"></Paginator>
    </div>
</div>


@code {
    [Parameter]
    public int ComposerId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private ComposerModel Composer = new();

    private string Portrait = "";

    private string userEmail = "";

    private HashSet<int> userFavorites = [];

    private bool IsAdmin;

    private IEnumerable<MediaLinkModel> LinkList = [];

    private PaginationState pagination = new() { ItemsPerPage = 10 };

    private async Task ConfirmDelete(string title, int id)
    {
        var confirm = await dialogService.Confirm($"You are going to delete link \"{title}\"?", "Confirm deleting", new()
            {
                OkButtonText = "Delete",
                CancelButtonText="Cancel",
                CssClass = "delete-confirm"

            });
        if(confirm != null && confirm.Value)
        {
            var res = await composerService.DeleteMediaById(id);
            navManager.Refresh(true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await composerService.GetById(ComposerId);

        if(data == null)
        {
            navManager.NavigateTo("/");
        }

        Composer = data!;
        Portrait = "data:image/jpeg;base64," + await composerService.GetPortrait(ComposerId);
        LinkList = await composerService.GetMediaLinks(ComposerId);
        var user = await currentUserService.GetUserInfoAsync();
        userFavorites = user?.FavoriteMediaIds ?? [];
        IsAdmin = await currentUserService.IsAdmin();
    }

    private async Task AddToFavorite(int mediaId)
    {
        userFavorites = await currentUserService.AddMediaToUserFavorites(mediaId);
    }

    private async Task DeleteFromFavorite(int mediaId)
    {
        userFavorites = await currentUserService.DeleteMediaFromUserFavorites(mediaId);
    }
}
