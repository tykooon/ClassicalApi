@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ClassicalApi.Blazor.Authentication

@inject SignInManager<AppUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="row mt-3">
    <div class="col-md-7 col-lg-5 col-xl-4 m-auto">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2 class="my-4"> Please log in</h2>
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="d-flex flex-row align-items-center justify-content-between">
                <div class="checkbox mb-1">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
            </div>
        </EditForm>
        <div class="mt-3">
            <p>
                Don't have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"> Register</a>
            </p>
        </div>
        <div class="divider my-4">
            <span class="h5">Or</span>
        </div>
        <div class="d-flex flex-row align-items-center justify-content-evenly">
            <h5>Use another service:</h5>
            <form class="form-horizontal" action="Account/PerformExternalLogin" method="post" name="external-logins">
                <div>
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <p>
                        @foreach (var provider in externalLogins)
                        {
                            <button type="submit" class="btn btn-white btn-floating p-1 mx-1" name="provider"
                                value="@provider.Name" title="Log in using your @provider.DisplayName account">
                                @switch (provider.DisplayName)
                                {
                                    case "Google":
                                        <img width="32" height="32" src="src/icons8-google.svg" alt="google"/>
                                        break;
                                    case "Microsoft":
                                        <img width="32" height="32" src="src/icons8-microsoft.svg" alt="microsoft" />
                                        break;
                                    case "Facebook":
                                        <img width="32" height="32" src="src/icons8-facebook.svg" alt="facebook" />
                                        break;
                                    default:
                                        <span>@provider.DisplayName</span>
                                        break;
                                }
                            </button>
                        }
                    </p>
                </div>
            </form>
        </div>
        <hr />
        @* <ExternalLoginPicker /> *@
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    IEnumerable<AuthenticationScheme> externalLogins = [];

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        externalLogins = await SignInManager.GetExternalAuthenticationSchemesAsync();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
