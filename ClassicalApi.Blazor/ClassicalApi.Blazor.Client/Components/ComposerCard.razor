@using ClassicalApi.Blazor.Client.Models
@using ClassicalApi.Blazor.Client.Services
@inject IComposerService composerService
@inject Radzen.DialogService dialogService

@if (composer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="min-width:480px;">
    <RadzenTemplateForm Data="@composer" Submit="@(async (ComposerModel data) => await SaveChanges(data) )">
        <RadzenRow Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="8">
                <RadzenFieldset Text="Base Info" Style="min-width:300px;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">First Name(s)</RadzenText>
                    <RadzenTextBox Placeholder="First Name..." @bind-Value="composer.FirstName" class="w-100 mb-3" aria-label="First Name" ReadOnly=@IsReadOnly />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Last Name</RadzenText>
                    <RadzenTextBox Placeholder="Last Name..." @bind-Value="composer.LastName" class="w-100 mb-3" aria-label="Last Name" ReadOnly=@IsReadOnly />

                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Year of Birth</RadzenText>
                            <RadzenNumeric Min="1500" Max="@DateTime.Now.Year" @bind-Value="composer.YearOfBirth" ReadOnly=@IsReadOnly></RadzenNumeric>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Year of Death</RadzenText>
                            <RadzenNumeric Min="1500" Max="@DateTime.Now.Year" @bind-Value="composer.YearOfDeath" ReadOnly=@IsReadOnly></RadzenNumeric>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenFieldset Text="Portrait" Style="height:100%;min-width:160px;">
                        <img src="@portrait" style="max-width:120px; border-radius:50%;margin-bottom:6px"/>
                        @if (!IsReadOnly)
                        {
                            <RadzenFileInput @bind-Value=@portrait TValue="string" class="w-100"
                                             Change=@(args => OnChange(args, "FileInput")) ChooseText="Change" MaxWidth=0
                                             Error=@(args => OnError(args, "FileInput")) ImageStyle="display:none"
                                             InputAttributes="@(new Dictionary<string,object>(){{ "aria-label", "select file" }})" />
                        }
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn Size="12">
                <RadzenFieldset Text="Short Bio" Style="min-width:470px;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">City of Birth</RadzenText>
                    <RadzenTextBox Placeholder="First Name..." @bind-Value="composer.CityOfBirth" class="w-100 mb-3" aria-label="First Name" ReadOnly=@IsReadOnly />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Country of Birth</RadzenText>
                    <RadzenTextBox Placeholder="Last Name..." @bind-Value="composer.CountryOfBirth" class="w-100 mb-3" aria-label="Last Name" ReadOnly=@IsReadOnly />

                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Some Facts</RadzenText>
                    <RadzenTextArea Rows="10" @bind-Value="composer.ShortBio" class="w-100 mb-3" aria-label="TextArea" ReadOnly=@IsReadOnly />
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Icon="save" Text="Save" Disabled=IsReadOnly/>
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Filled" Size="ButtonSize.Medium" Icon="cancel" Text="Close" Click="@Cancel" />
        </RadzenStack>
    </RadzenTemplateForm>
    </div>
}

@code {
    [Parameter]
    public int ComposerId { get; set; } = 1;

    [Parameter]
    public bool IsReadOnly { get; set; } = true;

    ComposerModel? composer;

    string? portrait;

    string fileName = "";
    long? fileSize;

    void OnChange(string value, string name)
    {
        // TODO: Delete Console Logging
        Console.WriteLine($"{name} value changed");
    }

    void OnError(UploadErrorEventArgs args, string name)
    {
        // TODO: Delete Console Logging
        Console.WriteLine($"{args.Message}");
    }


    async Task SaveChanges(ComposerModel data)
    {
        // TODO: Realize validation for data
        if (composer == null)
        {
            dialogService.Close(false);
            return;
        }

        if(composer.Id == 0)
        {
            composer.Id = await composerService.AddNew(composer);
            // TODO: Notify user about fail result, i.e. Id != 0 ???
        }
        else
        {
            var success = await composerService.Update(composer);
            // TODO: Notify user about fail result.
        }

        if (!string.IsNullOrEmpty(portrait) && portrait.Length > 24)
        {
            var res = await composerService.AddPortrait(composer.Id, portrait.Replace("data:image/jpeg;base64,", ""));
            Console.WriteLine(res);
            // TODO: Delete Console Logging
        }
        dialogService.Close(true);
    }

    void Cancel()
    {
        dialogService.Close(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if(ComposerId == 0)
        {
            composer = new();
            portrait = "data:image/jpeg;base64,";
        }
        else
        {
            composer = await composerService.GetById(ComposerId);
            if (composer == null || composer.Id == 0)
            {
                var alert = await dialogService.Alert("Unable to get data from database");
                dialogService.Close(true);
            }
            portrait = await composerService.GetPortrait(ComposerId);
            portrait = "data:image/jpeg;base64," + portrait;
        }; 
    }

}

